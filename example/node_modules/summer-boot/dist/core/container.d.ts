import { MetaKey, RequestMethod } from "./decorate";
interface Component {
    instance: Object;
    func: Function;
}
interface Controller extends Component {
    method?: RequestMethod;
    rules?: RegExp | undefined;
    params?: object | undefined;
}
interface Handler extends Component {
    rules: RegExp | null;
    type: HandlerType;
}
declare type HandlerType = MetaKey.INTERCEPTOR_HANDLER | MetaKey.ERROR_HANDLER;
declare class Container {
    private readonly container;
    add(k: string, v: Controller): void;
    get(k: string, method: RequestMethod): Controller;
    findAll(call: (key: string, value: Component) => boolean | void): void;
    addService(com: Component): void;
    getByType(server: Function): {};
    getByName(name: string): any;
    getInterceptor(path: string): Handler[];
    getErrorHandler(): Handler[];
    addInterceptor(inter: Handler): void;
}
declare const _default: Container;
export default _default;
